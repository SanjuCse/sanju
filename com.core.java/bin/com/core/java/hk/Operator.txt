OPERATORS:
===========
	- TO PERFORM SOME OPERATION ON THE GIVE VALUES.ORACLE SUPPORTING
THE FOLLOWING OPERATORS ARE,

	I) ASSIGNMENT OPERATOR		=>	=
	II) ARITHMETIC OPERATORS		=>	+ , - , * , /
	III) RELATIONAL OPERATORS		=>	< , > , <= , >= , != (OR) <>
	IV) LOGICAL OPERATORS		=>	AND,OR,NOT
	V) SET OPERATORS			=>	UNION,UNION ALL,
						INTERSECT,MINUS

	VI) SPECIAL OPERATORS		=> (+ve) 		(-ve)
					      ====		====
					    IN 		NOT IN
					    BETWEEN 	NOT BETWEEN
					    IS NULL	IS NOT NULL
				     	    LIKE 		NOT LIKE

I) ASSIGNMENT OPERATOR:
=========================
	- TO ASSIGN A VALUE TO VARIABLE / TO ATTRIBUTE.
SYNTAX:
========
	<COLUMN NAME> <ASSIGNMENT OPERATOR> <VALUE>
EX:
SELECT * FROM EMP WHERE EMPNO=7788;
UPDATE EMP SET SAL=34000 WHERE ENAME='JONES';
DELETE FROM EMP WHERE SAL=12000;

II) ARITHMETIC OPERATORS:
========================
	- TO PERFORM ADDITION,SUBTRACTION,MULTIPLE AND DIVISION.
SYNTAX:
========
	<COLUMN NAME> <ARITHMETIC OPERATOR> <VALUE>

EX:
WAQ TO DISPLAY EMPLOYEES SALARIES AFTER ADDING 1000/-?
SQL> SELECT ENAME,SAL OLD_SALARY,SAL+1000 NEW_SALARY FROM EMP;

EX:
WAQ TO DISPLAY EMPNO,ENAME,BASIC SALARY AND ANNUAL SALARY FROM EMP?
SQL> SELECT EMPNO,ENAME,SAL BASIC_SALARY,SAL*12 ANNUAL_SALARY
  2  FROM EMP;

EX:
WAQ TO DISPLAY EMPLOYEES SALARIES AFTER INCREMENT OF 10%?
SQL> SELECT ENAME,SAL BEFORE_INCREMENT,SAL*10/100 INCREMENT_AMOUNT,
  2  SAL+SAL*10/100 TOTAL_SALARY FROM EMP;

EX:
WAQ TO DISPLAY EMPLOYEES SALARIES AFTER INCREMENT OF 5% WHO ARE WORKING
AS A MANAGER?
SQL> SELECT ENAME,JOB,SAL BEFORE_INCREMENT,
  2  SAL*0.05 INCREMENT_AMOUNT,SAL+SAL*0.05 TOTAL_SALARY
  3  FROM EMP WHERE JOB='MANAGER';

RELATIONAL OPERATORS:
======================
	- TO COMPARE A SPECIFIC COLUMN VALUES WITH USER DEFINED CONDITION
IN THE QUERY.

SYNTAX:
=======
WHERE <COLUMN NAME> <RELATIONAL OPERATOR> <VALUE>;

EX:
WAQ TO DISPLAY EMPLOYEES WHO ARE EARNING MORE THAN 1500 SALARY?
SQL> SELECT * FROM EMP WHERE SAL>1500;

EX:
WAQ TO DISPLAY EMPLOYEES WHO ARE JOINED BEFORE 1981?
SQL> SELECT * FROM EMP WHERE HIREDATE <'01-JAN-81';

EX:
WAQ TO DISPLAY EMPLOYEES WHO ARE JOINED AFTER 1981?
SQL> SELECT * FROM EMP WHERE HIREDATE > '31-DEC-81';

LOGICAL OPERATORS:
===================
	- TO CHECK MORE THAN ONE CONDITION.
	- AND,OR,NOT.
AND:
====
	- IT RETURN A VALUE IF BOTH CONDITIONS ARE TRUE IN THE QUERY.

COND1	COND2
======	=======
T	T	---> T
T	F	---> F
F	T	---> F
F	F	---> F

SYNTAX:
========
WHERE <CONDITION1> AND <CONDITION2>........

EX:
WAQ TO DISPLAY EMPLOYEES WHO ARE WORKING AS A "CLERK" AND WHOSE NAME IS
"JAMES" ?
SQL> SELECT * FROM EMP WHERE JOB='CLERK' AND ENAME='JAMES';

OR:
===
	- IT RETURN A VALUE IF ANY ONE CONDITION IS TRUE IN THE GIVEN 
GROUP OF CONDITIONS IN QUERY.

COND1	COND2
======	======
T	T	----> T
T	F	----> T
F	T	----> T
F	F	----> F

SYNTAX:
========
WHERE <CONDITION1> OR <CONDITION2>..........

EX:
WAQ TO DISPLAY EMPLOYEES WHO ARE WORKING AS A "MANAGER" OR WHOSE SALARY
IS MORE THAN 2000?
SQL> SELECT * FROM EMP WHERE JOB='MANAGER' OR SAL>2000;

NOT:
====
	- IT RETURNS ALL VALUES EXCEPT THE GIVEN CONDITIONAL VALUES.
SYNTAX:
=======
WHERE NOT <CONDITION1> AND NOT <CONDITION2> ............

EX:
WAQ TO DISPLAY EMPLOYEES WHO ARE NOT WORKING AS A "CLERK" AND AS A "SALESMAN"?
SQL> SELECT * FROM EMP WHERE NOT JOB='CLERK' AND NOT JOB='SALESMAN';

SET OPERATORS:
===============
	- ARE USED TO COMBINED THE RESULTS OF TWO SELECT STATEMENTS AS
A SINGLE SET OF VALUES.

SYNTAX:
========
	<SELECT QUERY1> <SET OPERATOR> <SELECT QUERY2>;

UNION :
=======
	- TO COMBINED ALL ROWS FROM BOTH TABLES WITHOUT DUPLICATE ROWS.

UNION ALL:
==========
	- TO COMBINED ALL ROWS FROM BOTH TABLES WITH DUPLICATE ROWS.

INTERSECT:
==========
	- TO RETURNS COMMON ROWS FROM BOTH TABLES.

MINUS:
======
	- TO RETURNS UNCOMMON ROWS FROM LEFT SIDE TABLE WHICH ARE NOT
FOUND IN RIGHT SIDE TABLE.

			NARESHIT
			        ||
		EMP_HYD		EMP_CHENNAI

EX:
SQL> SELECT * FROM EMP_HYD;

       EID ENAME             SAL
---------- ---------- ----------
      1021 SMITH           85000
      1022 JAMES           72000
      1023 ADAMS           68000

SQL> SELECT * FROM EMP_CHENNAI;

       EID ENAME             SAL
---------- ---------- ----------
      1021 SMITH           85000
      1024 MILLER          35000
      1025 WARD            27000

EX:
WAQ TO DISPLAY EMPLOYEES WHO ARE WORKING IN HYD BUT NOT IN CHENNAI BRANCH?
SQL> SELECT * FROM EMP_HYD MINUS SELECT * FROM EMP_CHENNAI;

EX:
WAQ TO DISPLAY EMPLOYEES WHO ARE WORKING IN BOTH BRANCHES?
SQL> SELECT * FROM EMP_HYD INTERSECT SELECT * FROM EMP_CHENNAI;

EX:
WAQ TO DISPLAY ALL EMPLOYEES WHO ARE WORKING IN NARESHIT ORGANIZATION?
SQL> SELECT * FROM EMP_HYD 
         UNION ALL 
        SELECT * FROM EMP_CHENNAI;---------(WITH DUPLICATES)

SQL> SELECT * FROM EMP_HYD 
         UNION  
         SELECT * FROM EMP_CHENNAI;-------(WITHOUT DUPLICATES)

BASIC RULES OF SET OPERATORS:
==============================
1. THE NO.OF COLUMNS IN BOTH SELECT QUERIES SHOULD BE SAME.
2. ORDER COLUMNS AND THEIR DATATYPES OF COLUMNS MUST BE MATCH IN
    BOTH SELECT QUERIES.

VI) SPECIAL OPERATORS:
======================
 IN :
===
	- COMPARING GROUP OF VALUES WITH A SINGLE CONDITION.

SYNTAX:
=======
	WHERE <COLUMN NAME> IN(<LIST OF VALUES>);

EX:
WAQ TO DISPLAY EMPLOYEES WHOSE EMPNO IS 7369,7566,7788,7900?
SQL> SELECT * FROM EMP WHERE EMPNO IN(7369,7566,7788,7900);

EX:
WAQ TO DISPLAY EMPLOYEES WHOSE EMPNO IS NOT 7369,7566,7788,7900?
SQL> SELECT * FROM EMP WHERE EMPNO NOT IN(7369,7566,7788,7900);

BETWEEN:
=========
	- COMPARING A PARTICULAR RANGE VALUE.
SYNTAX:
========
	WHERE <COLUMN NAME> BETWEEN <LOW VALUE> AND <HIGH VALUE>;

EX:
WAQ TO DISPLAY EMPLOYEES WHO ARE JOINED IN 1981?
SQL> SELECT * FROM EMP WHERE HIREDATE BETWEEN '01-JAN-81' AND '31-DEC-81';


EX:
WAQ TO DISPLAY EMPLOYEES WHO ARE NOT JOINED IN 1981?
SQL> SELECT * FROM EMP WHERE HIREDATE NOT BETWEEN '01-JAN-81' AND '31-DEC-81';

IS NULL:
========
	- COMPARING NULLS IN A TABLE.
SYNTAX:
========
	WHERE <COLUMN NAME> IS NULL;

EX:
WAQ TO DISPLAY EMPLOYESS WHOSE COMMISSION IS EMPTY / NULL ?
SQL> SELECT * FROM EMP WHERE COMM IS NULL;

EX:
WAQ TO DISPLAY EMPLOYESS WHOSE COMMISSION IS NOT EMPTY / NULL ?
SQL> SELECT * FROM EMP WHERE COMM IS NOT NULL;

WHAT IS NULL?
=============
	- NULL IS EMPTY / UNKNOWN / UNDEFINED VALUE.
	- NULL != 0 , NULL != SPACE

EX:
WAQ TO DISPLAY EMPNO,ENAME,SAL,COMM,SAL+COMM FROM EMP TABLE WHOSE NAME
IS SMITH?
SQL> SELECT EMPNO,ENAME,SAL,COMM,SAL+COMM TOTAL_SALARY
          FROM EMP WHERE ENAME='SMITH';

     EMPNO 	ENAME             	SAL      	 COMM 	TOTAL_SALARY
---------- 		---------- 		---------- 	---------- 	------------
      7369 		SMITH             	800

	- GENERALLY IF ANY ARITHMETIC OPERATOR IS PERFORMING SOME OPERATION
WITH "NULL" THEN IT AGAIN RETURN "NULL" ONLY.

	EX: IF  X = 1000;
	I) X + NULL ===> 1000+NULL =====> NULL
	II) X - NULL ===> 1000 - NULL ====> NULL
	III) X * NULL ===> 1000 * NULL ====> NULL
	IV) X / NULL ====> 1000 / NULL ====> NULL

	- TO OVERCOME THE ABOVE PROBLEM WE USE A PRE-DEFINED FUNCTION IS 
CALLED AS "NVL()".

WHAT IS NVL(EXP1,EXP2)?
=======================
	- IT IS PRE-DEFINED FUNCTION.
	- IS USED TO REPLACE A USER DEFINED VALUE INPLACE OF NULL.
	- THIS FUNCTION IS HAVING TWO ARGUMENTS ARE 
                   EXPRESSION1 AND EXPRESSION 2.
	          > IF EXP1 IS NULL THEN IT RETURNS EXP2 VALUE(UD VALUE)
	          > IF EXP1 IS NOT NULL THEN IT RETURNS EXP1 VALUE ONLY.
EX:
SQL> SELECT NVL(NULL,0) FROM DUAL;

NVL(NULL,0)
-----------
          0

SQL> SELECT NVL(NULL,100) FROM DUAL;

NVL(NULL,100)
-------------
          100

SQL> SELECT NVL(0,100) FROM DUAL;

NVL(0,100)
----------
         0

SOLUTION:
SQL> SELECT EMPNO,ENAME,SAL,COMM,SAL+NVL(COMM,0) TOTAL_SALARY
  2  FROM EMP WHERE ENAME='SMITH';

     EMPNO    ENAME             SAL       COMM    TOTAL_SALARY
      ----------     ----------             ----------     ----------     ------------
      7369       SMITH             800                        800

NVL2(EXP1,EXP2,EXP3):
=====================
	- IT IS AN EXTENSION OF NVL().
	- THIS FUNCTION IS HAVING 3 ARGUMENTS THOSE ARE,
	  EXPRESSION1,EXPRESSION2 AND EXPRESSION3.
	> IF EXP1 IS NULL THEN IT RETURNS EXP3 VALUE (UD VALUE).
	> IF EXP1 IS NOT NULL THEN IT RETURNS EXP2 VALUE (UD VALUE).
EX:
WAQ TO UPDATE EMPLOYEE COMMISSIONS IN A TABLE BASED ON THE FOLLOWING 
CONDITIONS ARE,
	I) IF EMPLOYEE COMM IS NULL THEN UPDATE THOSE EMPLOYEES COMMISSION
	IS 500.
	II) IF EMPLOYEE COMM IS NOT NULL THEN UPDATE THOSE EMPLOYEES 	COMMISSON AS COMM+500.

SQL> UPDATE EMP SET COMM=NVL2(COMM,COMM+500,500);

EX:
SQL> SELECT NVL2(NULL,100,200) FROM DUAL;

NVL2(NULL,100,200)
------------------
               200

SQL> SELECT NVL2(500,100,200) FROM DUAL;

NVL2(500,100,200)
-----------------
              100

LIKE OPERATOR:
===============
	- COMPARING A SPECIFIC CHARACTER PATTERN WISE.
	- WHEN USE LIKE OPERATOR WE SHOULD USE THE FOLLOWING 
	WILDCARD OPERATORS ARE:
		i) %	- IT REPRESENT THE REMAINING GROUP OF CHAR's
			  AFTER SELECTED CHARACTER.
		ii) _ 	- COUNTING A SINGLE CHARACTER IN THE EXPRESSION.

	EX:
	WAQ TO DISPLAY EMPLOYEES WHOSE NAME STARTS WITH "S" CHAR?
	SELECT * FROM EMP WHERE ENAME LIKE 'S%';
		S	%
		===	===
		S	MITH
		S	AI
		S	UMAN
		S	COTT
		S	URESH
	
	EX:
	WAQ TO DISPLAY EMPLOYEES WHOSE NAME IS HAVING 3 CHAR's?
	SELECT * FROM EMP WHERE ENAME LIKE '___ ';

		SMITH
		SAI
		SUMAN
		SCOTT
		SURESH
		ANU
SYNTAX:
========
WHERE <COLUMN NAME> LIKE '<WILDCARD OPERATOR> <CHAR. PATTERN> <WILDCARD OPERATOR> ';

EX:
TO DISPLAY EMPLOYEES WHOSE NAME STARTS WITH "S" CHAR?
SQL> SELECT * FROM EMP WHERE ENAME LIKE 'S%';

EX:
TO DISPLAY EMPLOYEES WHOSE NAME ENDS WITH "R" CHAR?
SQL> SELECT * FROM EMP WHERE ENAME LIKE'%R';

EX:
TO DISPLAY EMPLOYEES WHOSE NAME STARTS WITH "M" AND ENDS WITH "N" CHAR?
SQL> SELECT * FROM EMP WHERE ENAME LIKE'M%N';

EX:
TO DISPLAY EMPLOYEES WHOSE NAME IS HAVING 'I' CHAR ?
SQL> SELECT * FROM EMP WHERE ENAME LIKE'%I%';

EX:
TO DISPLAY EMPLOYEES WHOSE NAME IS HAVING 4 CHAR'S?
SQL> SELECT * FROM EMP WHERE ENAME LIKE'____';

EX:
TO DISPLAY EMPLOYEES WHOSE NAME SECOND CHARACTER IS "O" ?
SQL> SELECT * FROM EMP WHERE ENAME LIKE'_O%';

EX:
TO DISPLAY EMPLOYEES WHO ARE JOINED IN 1981?
SQL> SELECT * FROM EMP WHERE HIREDATE LIKE '%81';

EX:
TO DISPLAY EMPLOYEE WHO ARE JOINED IN MONTH OF DECEMBER?
SQL> SELECT * FROM EMP WHERE HIREDATE LIKE '%DEC%';

EX:
TO DISPLAY EMPLOYEES WHO ARE JOINED IN THE MONTH OF JUNE OR DECEMBER?
SQL> SELECT * FROM EMP WHERE HIREDATE LIKE '%JUN%' OR 
         HIREDATE LIKE '%DEC%';

LIKE OPERATOR WITH SPECIAL CHAR's:
===================================
SQL> SELECT * FROM TEST;

ENAME             	SAL
---------- 		----------
_WARD           	23000
MILL#ER         	12000
KUM_AR          	34000
WAR%NER         	55000
SAI@123         	80000

EX:
WAQ TO DISPLAY EMPLOYEES WHOSE NAME IS HAVING "@" SYMBOL?
SQL> SELECT * FROM TEST WHERE ENAME LIKE '%@%';

EX:
WAQ TO DISPLAY EMPLOYEES WHOSE NAME IS HAVING "#" SYMBOL?
SQL> SELECT * FROM TEST WHERE ENAME LIKE '%#%';

EX:
WAQ TO DISPLAY EMPLOYEES WHOSE NAME IS HAVING "_" SYMBOL?
SQL> SELECT * FROM TEST WHERE ENAME LIKE '%_%';-----WORNG RESULT

EX:
WAQ TO DISPLAY EMPLOYEES WHOSE NAME IS HAVING "%" SYMBOL?
SQL> SELECT * FROM TEST WHERE ENAME LIKE '%%%';---WORNG RESULT

NOTE:
=====
	- BY DEFAULT ORACLE SERVER WILL TREAT " % , _ " ARE WILDCARD OPERATORS.SO TO OVERCOME THIS PROBLEM AND TREAT AS A SPECIAL CHAR's
THEN WE SHOULD USE A PRE-DEFINED KEYWORD IS "ESCAPE '\' ".

SOLUTION:
===========
SQL> SELECT * FROM TEST WHERE ENAME LIKE '%\_%'ESCAPE'\';
SQL> SELECT * FROM TEST WHERE ENAME LIKE '%\%%'ESCAPE'\';

EX:
WAQ TO DISPLAY EMPLOYEES WHOSE NAME IS NOT STARTS WITH "S" CHAR?
SQL> SELECT * FROM EMP WHERE ENAME NOT LIKE 'S%';
===========================================================================
